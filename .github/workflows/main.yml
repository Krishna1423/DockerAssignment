name: Deploy to ECR

on: 
  push:
    branches: [ main ]

jobs:
  
  build:
    
    name: Build Image
    runs-on: ubuntu-latest

   
    steps:

    - name: Check out code
      uses: actions/checkout@v3

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        AWS_REGION: us-east-1

    - name: Build, test, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: assignment1-repo
        IMAGE_TAG: v0.1
      run: |
        cd clo835_summer2023_assignment1-main/
        ls -ltra
        # Build image for mysql db
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:db_$IMAGE_TAG -f Dockerfile_mysql .

        # Unit test for mysql container
        docker run -d --name my_db $ECR_REGISTRY/$ECR_REPOSITORY:db_$IMAGE_TAG
        docker ps
        echo "Pause for 10 seconds to let container start"
        sleep 10
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:db_$IMAGE_TAG

        # Build image for application
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:app_$IMAGE_TAG -f Dockerfile .
        
        # Unit test for the application container
        export DBPORT=3306
        export DBPWD=pw
        export DBHOST=172.17.0.2
        docker run -d -p 8080:8080 -e DBPORT=$DBPORT -e DBHOST=$DBHOST -e DBPWD=$DBPWD --name my_app $ECR_REGISTRY/$ECR_REPOSITORY:app_$IMAGE_TAG
        docker ps
        echo "Pause for 10 seconds to let container start"
        sleep 10
        curl localhost -vvv
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:app_$IMAGE_TAG
